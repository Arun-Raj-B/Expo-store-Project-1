<!-- carousel -->
<section class="page-fill pb-2" style="background-color: #ece6d9">
  <!-- products -->
  <div class="container-fluid" style="padding-top: 5%">
    <div class="container card" style="background-color: #eae2d1">
      <div class="row pt-2 d-flex">
        <div class="col"><h4>OrderId : <%=order._id %></div>
        <div class="col text-end">
          <div>
            <% if (order.status!= "Cancelled"&&order.status!="Shipped"&&order.status!="Delivered"&&order.status !== "Refund complete"&&order.status !== "Requested return") { %> 
              <% if (order.status == "Cancel requested"||order.status == "Cancelled") {%>
                <button class="btn btn-outline-danger"><%=order.status  %> </button>
                <% } else {%> 
              <button class="btn btn-outline-danger" id="cancel" onclick="cancelOrder('<%=order._id %>','<%=order.deliveryDetails.mobile%>')">Cancel Order</button>
              <% } %> 
              <% } %>
              <% if (order.status == "Delivered"){ %> 
                <button class="btn btn-outline-danger" id="return" onclick="returnOrder('<%=order._id %>','<%=order.deliveryDetails.mobile%>')">Return Order</button>
                <% } %> 
                <button class="btn btn-outline-success" onclick="downloadInvoice()">Download invoice</button>
          </div>
        </div>
        <div class="pb-2"></div>
        <hr />
      </div>
      <div class="row">
        <div class="col">
          <p><b>Date : </b><%=order.date %></p>
          <p>
            <b>Address : </b><%=order.deliveryDetails.address%>,
            <%=order.deliveryDetails.pincode %>, <%=order.deliveryDetails.mobile
            %>
          </p>
          <p><b>Total Amount : </b><%=order.totalAmount %> ₹</p>
          <p><b>Status : </b><span id="ifReturn"><%=order.status %></span></p>
        </div>
      </div>
      <div class="row d-flex">
        <!-- <div id="products" hidden><=products  %> </div> -->
        <% locals.products.forEach(orderProduct=>{%>
        <div class="col-md-3 col-sm-6 p-3 d-flex justify-content-center">
          <div class="card card-work shadow rounded" style="width: 16rem">
            <div>
              <a href="/singleProduct/<%= orderProduct.product._id %>">
                <img
                  width="10"
                  src="/users/productImages/<%= orderProduct.product._id %>.jpg"
                  class="card-img-top"
                  alt="image"
                />
              </a>
            </div>
            <div class="card-body" style="background-color: #ede2c8">
              <h5 class="card-title"><%= orderProduct.product.Name %></h5>
              <p class="card-text">
                Price / unit : <%= orderProduct.product.OfferPrice %> ₹
              </p>
              <p class="card-text">Quantity : <%= orderProduct.quantity %></p>
            </div>
          </div>
        </div>
        <% }) %>
      </div>
    </div>
  </div>
</section>
<script
  text="text/javascript"
  src="/users/javascript/countIncrement.js"
></script>

<script>
  function cancelOrder(orderId,mobile){
    console.log(orderId)
    Swal.fire({
  title: 'Are you sure?',
  text: `Do you want to cancel the order with OrderId : ${orderId}`,
  icon: 'warning',
  showCancelButton: true,
  confirmButtonColor: '#3085d6',
  cancelButtonColor: '#d33',
  confirmButtonText: 'Yes!'
}).then((result) => {
  if (result.isConfirmed) {
    $.ajax({
      url:'/cancelOrder',
      data:{
        orderId:orderId,
        mobile:mobile
      },
      method:"post",
      success:(response)=>{
        document.getElementById("cancel").innerHTML = "Cancel requested";
        Swal.fire(
      'Request send!',
      'Wait for confirmation',
      'success'
    )
      }
    })
  }
})
  }
</script>

<script>
  function returnOrder(orderId,mobile){
    console.log(orderId)
    Swal.fire({
  title: 'Are you sure?',
  text: `Do you want to return the order with OrderId : ${orderId}`,
  icon: 'warning',
  showCancelButton: true,
  confirmButtonColor: '#3085d6',
  cancelButtonColor: '#d33',
  confirmButtonText: 'Yes!'
}).then((result) => {
  if (result.isConfirmed) {
    Swal.fire({
      title: "Reason for return",
      html: `<input type="text" id="subject" class="swal2-input" placeholder= "Subject">
      <textarea id="description" class="swal2-input" placeholder= "Type a detailed reason for return" rows="20" cols="25"></textarea>`,
      confirmButtonText: "Send",
      focusConfirm: false,
      preConfirm: () => {
        const subject = Swal.getPopup().querySelector("#subject").value;
        const description = Swal.getPopup().querySelector("#description").value;

        let validateDescription = (description) => {
          return String(description)
            .toLowerCase()
            .match(/^[\w_.!? ]{10,}$/);
        };

        let validateSubject = (subject) => {
          return String(subject)
            .toLowerCase()
            .match(/^[\w_.!? ]{3,}$/);
        };

        const checkSubject = validateSubject(subject);
        const checkDescription = validateDescription(description);
        console.log(checkSubject)
        console.log(checkDescription)

        if (!checkSubject || !checkDescription) {
          Swal.showValidationMessage(`Enter subject and a brief description`);
        }else{
          $.ajax({
            url: "/returnOrder",
            data: {
              subject,
              description,
              orderId,
              mobile,
            },
            method: "post",
            success: (response) => {
              var toastMixin = Swal.mixin({
                  toast: true,
                  icon: "success",
                  title: "General Title",
                  animation: false,
                  position: "top-right",
                  showConfirmButton: false,
                  timer: 1500,
                  timerProgressBar: true,
                  didOpen: (toast) => {
                    toast.addEventListener("mouseenter", Swal.stopTimer);
                    toast.addEventListener("mouseleave", Swal.resumeTimer);
                  },
                });
                document.getElementById("return").style.display = 'none'
                document.getElementById("ifReturn").innerHTML = "Requested return";
                toastMixin.fire({
                  animation: true,
                  title: "Return request sent",
                });
            }
          })
        }
          }
        });
  }
})
  }
</script>

<script>
function downloadInvoice(){
    var products = '<%- JSON.stringify(products) %>', allProducts=[];
    var parsed = JSON.parse(products);


    parsed.forEach(single => {
      allProducts.push({
        "quantity": single.quantity,
            "description": single.product.Name,
            "tax-rate": 0,
            "price": single.product.OfferPrice,
      })
    })

    console.log(parsed.length)




    // console.log("<=products.length%>")
    // console.log("<=products[0].product.Name%>")
    // console.log("<=products[0].quantity%>")

    // let length = parseInt("<=products.length%>"),obj ={},allProducts = [], i;
    // "<let a=0%>"
    // for( i=0;i<length;i++){  
    //    allProducts.push({
    //     "quantity": "<=products[a].quantity%>",
    //         "description": "<= products[a].product.Name %>",
    //         "tax-rate": 0,
    //         "price": "<= products[a].product.OfferPrice %>"
    //   });
    //   "< a++%>"
    //   console.log(allProducts);
      // allProducts.push({
      //   "quantity": "<=products[1].quantity%>",
      //       "description": "<= products[1].product.Name %>",
      //       "tax-rate": 0,
      //       "price": "<= products[1].product.OfferPrice %>"
      // });
      // console.log(allProducts);
    //}
    


    // let allProducts = "<=products%>"
    // console.log(allProducts[0].product.Name)
    // allProducts.forEach(product => {
    //   let obj = {
    //     "quantity": "<=product.quantity%>",
    //         "description": "<= product.product.Name %>",
    //         "tax-rate": 0,
    //         "price": "<= product.product.OfferPrice %>"
    //   }
    //   products.push(obj);
    // });

    var data = {
    // Customize enables you to provide your own templates
    // Please review the documentation for instructions and examples
    "customize": {
        //  "template": fs.readFileSync('template.html', 'base64') // Must be base64 encoded html 
    },
    "images": {
        // The logo on top of your invoice
        "logo": "",
        // The invoice background
        "background": ""
    },
    // Your own data
    "sender": {
        "company": "EXPO store",
        "address": "Thottathil",
        "zip": "691016",
        "city": "Kollam",
        "country": "Kerala"
        //"custom1": "custom value 1",
        //"custom2": "custom value 2",
        //"custom3": "custom value 3"
    },
    // Your recipient
    "client": {
        "address": "<%=order.deliveryDetails.address%>",
        "zip": "<%=order.deliveryDetails.pincode %>",
        // "custom1": "custom value 1",
        // "custom2": "custom value 2",
        // "custom3": "custom value 3"
    },
    "information": {
        // Invoice number
        "number": "<%=order._id %>",
        // Invoice data
        "date": "<%=order.date %>",
         // Invoice due date
         "due-date": "<%=order.date %>"
    },
    // The products you would like to see on your invoice
    // Total values are being calculated automatically
    "products": allProducts,
    // The message you would like to display on the bottom of your invoice
    "bottom-notice": "Thank you for shopping from us. Visit again",
    // Settings to customize your invoice
    "settings": {
        "currency": "INR", // See documentation 'Locales and Currency' for more info. Leave empty for no currency.
        // "locale": "nl-NL", // Defaults to en-US, used for number formatting (See documentation 'Locales and Currency')
        // "tax-notation": "gst", // Defaults to 'vat'
        // "margin-top": 25, // Defaults to '25'
        // "margin-right": 25, // Defaults to '25'
        // "margin-left": 25, // Defaults to '25'
        // "margin-bottom": 25, // Defaults to '25'
        // "format": "A4", // Defaults to A4, options: A3, A4, A5, Legal, Letter, Tabloid
        // "height": "1000px", // allowed units: mm, cm, in, px
        // "width": "500px", // allowed units: mm, cm, in, px
        // "orientation": "landscape", // portrait or landscape, defaults to portrait
    },
    // Translate your invoice to your preferred language
    "translate": {
        // "invoice": "FACTUUR",  // Default to 'INVOICE'
        // "number": "Nummer", // Defaults to 'Number'
        // "date": "Datum", // Default to 'Date'
        // "due-date": "Verloopdatum", // Defaults to 'Due Date'
        // "subtotal": "Subtotaal", // Defaults to 'Subtotal'
        // "products": "Producten", // Defaults to 'Products'
        // "quantity": "Aantal", // Default to 'Quantity'
        // "price": "Prijs", // Defaults to 'Price'
        // "product-total": "Totaal", // Defaults to 'Total'
        // "total": "Totaal" // Defaults to 'Total'
    },
};

//Create your invoice! Easy!
easyinvoice.createInvoice(data, function (result) {
    //The response will contain a base64 encoded PDF file
    console.log('PDF base64 string: ', result.pdf);
    easyinvoice.download("invoice.pdf");
});
  }
</script>
